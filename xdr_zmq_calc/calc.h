/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CALC_H_RPCGEN
#define _CALC_H_RPCGEN

#define RPCGEN_VERSION	199506

#include <rpc/rpc.h>

#define ADD 601
#define SUBTRACT 602
#define MULTIPLY 603
#define DIVIDE 604
#define FACTORIAL 605

struct AddWork {
	int num1;
	int num2;
	int num3;
	int num4;
};
typedef struct AddWork AddWork;
#ifdef __cplusplus
extern "C" bool_t xdr_AddWork(XDR *, AddWork*);
#elif __STDC__
extern  bool_t xdr_AddWork(XDR *, AddWork*);
#else /* Old Style C */
bool_t xdr_AddWork();
#endif /* Old Style C */


struct AddResult {
	int num;
	int err;
};
typedef struct AddResult AddResult;
#ifdef __cplusplus
extern "C" bool_t xdr_AddResult(XDR *, AddResult*);
#elif __STDC__
extern  bool_t xdr_AddResult(XDR *, AddResult*);
#else /* Old Style C */
bool_t xdr_AddResult();
#endif /* Old Style C */


struct SubWork {
	int num1;
	int num2;
};
typedef struct SubWork SubWork;
#ifdef __cplusplus
extern "C" bool_t xdr_SubWork(XDR *, SubWork*);
#elif __STDC__
extern  bool_t xdr_SubWork(XDR *, SubWork*);
#else /* Old Style C */
bool_t xdr_SubWork();
#endif /* Old Style C */


struct SubResult {
	int num;
	int err;
};
typedef struct SubResult SubResult;
#ifdef __cplusplus
extern "C" bool_t xdr_SubResult(XDR *, SubResult*);
#elif __STDC__
extern  bool_t xdr_SubResult(XDR *, SubResult*);
#else /* Old Style C */
bool_t xdr_SubResult();
#endif /* Old Style C */


struct MulWork {
	int num1;
	int num2;
	int num3;
};
typedef struct MulWork MulWork;
#ifdef __cplusplus
extern "C" bool_t xdr_MulWork(XDR *, MulWork*);
#elif __STDC__
extern  bool_t xdr_MulWork(XDR *, MulWork*);
#else /* Old Style C */
bool_t xdr_MulWork();
#endif /* Old Style C */


struct MulResult {
	int num;
	int err;
};
typedef struct MulResult MulResult;
#ifdef __cplusplus
extern "C" bool_t xdr_MulResult(XDR *, MulResult*);
#elif __STDC__
extern  bool_t xdr_MulResult(XDR *, MulResult*);
#else /* Old Style C */
bool_t xdr_MulResult();
#endif /* Old Style C */


struct DivWork {
	int num1;
	int num2;
};
typedef struct DivWork DivWork;
#ifdef __cplusplus
extern "C" bool_t xdr_DivWork(XDR *, DivWork*);
#elif __STDC__
extern  bool_t xdr_DivWork(XDR *, DivWork*);
#else /* Old Style C */
bool_t xdr_DivWork();
#endif /* Old Style C */


struct DivResult {
	int num;
	int err;
};
typedef struct DivResult DivResult;
#ifdef __cplusplus
extern "C" bool_t xdr_DivResult(XDR *, DivResult*);
#elif __STDC__
extern  bool_t xdr_DivResult(XDR *, DivResult*);
#else /* Old Style C */
bool_t xdr_DivResult();
#endif /* Old Style C */


struct FacWork {
	int num1;
};
typedef struct FacWork FacWork;
#ifdef __cplusplus
extern "C" bool_t xdr_FacWork(XDR *, FacWork*);
#elif __STDC__
extern  bool_t xdr_FacWork(XDR *, FacWork*);
#else /* Old Style C */
bool_t xdr_FacWork();
#endif /* Old Style C */


struct FacResult {
	int num;
	int err;
};
typedef struct FacResult FacResult;
#ifdef __cplusplus
extern "C" bool_t xdr_FacResult(XDR *, FacResult*);
#elif __STDC__
extern  bool_t xdr_FacResult(XDR *, FacResult*);
#else /* Old Style C */
bool_t xdr_FacResult();
#endif /* Old Style C */


struct calc_req {
	int op;
	union {
		AddWork add_request;
		SubWork sub_request;
		MulWork mul_request;
		DivWork div_request;
		FacWork fac_request;
	} calc_req_u;
};
typedef struct calc_req calc_req;
#ifdef __cplusplus
extern "C" bool_t xdr_calc_req(XDR *, calc_req*);
#elif __STDC__
extern  bool_t xdr_calc_req(XDR *, calc_req*);
#else /* Old Style C */
bool_t xdr_calc_req();
#endif /* Old Style C */


struct calc_res {
	int op;
	union {
		AddResult add_result;
		SubResult sub_result;
		MulResult mul_result;
		DivResult div_result;
		FacWork fac_result;
	} calc_res_u;
};
typedef struct calc_res calc_res;
#ifdef __cplusplus
extern "C" bool_t xdr_calc_res(XDR *, calc_res*);
#elif __STDC__
extern  bool_t xdr_calc_res(XDR *, calc_res*);
#else /* Old Style C */
bool_t xdr_calc_res();
#endif /* Old Style C */


#endif /* !_CALC_H_RPCGEN */
